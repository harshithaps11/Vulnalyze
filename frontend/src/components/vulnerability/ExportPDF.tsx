import React from 'react';
import { jsPDF } from 'jspdf';
import { Button } from '../ui/button';

interface Vulnerability {
  id: number;
  title: string;
  description: string;
  severity: string;
  location: string;
  evidence: string;
  is_false_positive: boolean;
  remediation_status?: string;
  remediation_notes?: string;
}

interface ExportPDFProps {
  vulnerabilities: Vulnerability[];
  scanName: string;
  organizationName: string;
}

export const ExportPDF: React.FC<ExportPDFProps> = ({
  vulnerabilities,
  scanName,
  organizationName,
}) => {
  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const margin = 20;
    let y = 20;

    // Add header
    doc.setFontSize(20);
    doc.text('Vulnerability Report', pageWidth / 2, y, { align: 'center' });
    y += 10;

    doc.setFontSize(12);
    doc.text(`Scan: ${scanName}`, margin, y);
    y += 7;
    doc.text(`Organization: ${organizationName}`, margin, y);
    y += 7;
    doc.text(`Generated: ${new Date().toLocaleString()}`, margin, y);
    y += 15;

    // Add vulnerabilities
    vulnerabilities.forEach((vuln, index) => {
      if (y > doc.internal.pageSize.getHeight() - 40) {
        doc.addPage();
        y = 20;
      }

      doc.setFontSize(14);
      doc.text(`${index + 1}. ${vuln.title}`, margin, y);
      y += 7;

      doc.setFontSize(12);
      doc.text(`Severity: ${vuln.severity}`, margin, y);
      y += 7;

      if (vuln.is_false_positive) {
        doc.setTextColor(255, 0, 0);
        doc.text('Status: False Positive', margin, y);
        doc.setTextColor(0, 0, 0);
        y += 7;
      }

      if (vuln.remediation_status) {
        doc.text(`Remediation Status: ${vuln.remediation_status}`, margin, y);
        y += 7;
      }

      doc.text('Description:', margin, y);
      y += 7;
      const descriptionLines = doc.splitTextToSize(vuln.description, pageWidth - 2 * margin);
      doc.text(descriptionLines, margin, y);
      y += descriptionLines.length * 7;

      if (vuln.location) {
        doc.text('Location:', margin, y);
        y += 7;
        const locationLines = doc.splitTextToSize(vuln.location, pageWidth - 2 * margin);
        doc.text(locationLines, margin, y);
        y += locationLines.length * 7;
      }

      if (vuln.evidence) {
        doc.text('Evidence:', margin, y);
        y += 7;
        const evidenceLines = doc.splitTextToSize(vuln.evidence, pageWidth - 2 * margin);
        doc.text(evidenceLines, margin, y);
        y += evidenceLines.length * 7;
      }

      if (vuln.remediation_notes) {
        doc.text('Remediation Notes:', margin, y);
        y += 7;
        const notesLines = doc.splitTextToSize(vuln.remediation_notes, pageWidth - 2 * margin);
        doc.text(notesLines, margin, y);
        y += notesLines.length * 7;
      }

      y += 10;
    });

    // Save the PDF
    doc.save(`vulnerability-report-${scanName.toLowerCase().replace(/\s+/g, '-')}.pdf`);
  };

  return (
    <Button onClick={generatePDF} variant="outline">
      Export as PDF
    </Button>
  );
}; 