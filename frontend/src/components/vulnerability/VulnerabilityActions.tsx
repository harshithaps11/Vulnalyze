import React, { useState } from 'react';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { useToast } from '../ui/use-toast';
import { api } from '@/lib/api';
import { MonacoEditor } from '../MonacoEditor';

interface VulnerabilityActionsProps {
  vulnerability: {
    id: number;
    remediation_code?: string;
    remediation_status?: string;
    evidence?: string;
  };
  onUpdate: () => void;
}

export const VulnerabilityActions: React.FC<VulnerabilityActionsProps> = ({
  vulnerability,
  onUpdate,
}) => {
  const [isRemediating, setIsRemediating] = useState(false);
  const [remediationCode, setRemediationCode] = useState(vulnerability.remediation_code || vulnerability.evidence || '');
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const handleRemediate = async () => {
    try {
      setIsLoading(true);
      const response = await api.put(`/api/v1/vulnerabilities/${vulnerability.id}/remediate`, {
        code: remediationCode,
        status: 'in_progress',
        notes: 'Remediation started',
      });

      if (response.status === 200) {
        toast({
          title: 'Success',
          description: 'Remediation started',
        });
        setIsRemediating(false);
        onUpdate();
      }
    } catch (error) {
      console.error('Error starting remediation:', error);
      toast({
        title: 'Error',
        description: 'Failed to start remediation',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        {vulnerability.remediation_status && (
          <Badge variant="outline">{vulnerability.remediation_status}</Badge>
        )}
      </div>

      <div className="flex gap-2">
        <Button
          variant="default"
          onClick={() => setIsRemediating(true)}
          disabled={vulnerability.remediation_status === 'completed' || isLoading}
        >
          Remediate Now
        </Button>
      </div>

      {isRemediating && (
        <div className="mt-4 space-y-4">
          <MonacoEditor
            value={remediationCode}
            onChange={setRemediationCode}
            language="javascript"
            height="300px"
          />
          <div className="flex gap-2">
            <Button 
              onClick={handleRemediate}
              disabled={isLoading}
            >
              {isLoading ? 'Saving...' : 'Save Remediation'}
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setIsRemediating(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}; 