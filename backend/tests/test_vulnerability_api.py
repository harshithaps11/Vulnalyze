import pytest
from fastapi.testclient import TestClient
from app.main import app
from app.core.database import Base, engine
from app.models.vulnerability import Vulnerability
from sqlalchemy.orm import Session

client = TestClient(app)

def test_create_vulnerability():
    response = client.post(
        "/api/v1/vulnerabilities/",
        json={
            "scan_id": 1,
            "title": "Test Vulnerability",
            "description": "This is a test vulnerability",
            "severity": "high",
            "location": "test/file.py:10",
            "evidence": "Found SQL injection vulnerability"
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "Test Vulnerability"
    assert data["is_false_positive"] == False
    return data["id"]

def test_mark_false_positive(vulnerability_id: int):
    response = client.put(
        f"/api/v1/vulnerabilities/{vulnerability_id}/false-positive",
        json={
            "is_false_positive": True,
            "notes": "This is a false positive because it's a test"
        }
    )
    assert response.status_code == 200
    data = response.json()
    assert data["is_false_positive"] == True
    assert data["remediation_notes"] == "This is a false positive because it's a test"

def test_get_vulnerability(vulnerability_id: int):
    response = client.get(f"/api/v1/vulnerabilities/{vulnerability_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == vulnerability_id
    assert data["is_false_positive"] == True

if __name__ == "__main__":
    # Create test vulnerability
    vulnerability_id = test_create_vulnerability()
    print(f"Created vulnerability with ID: {vulnerability_id}")
    
    # Mark as false positive
    test_mark_false_positive(vulnerability_id)
    print("Marked vulnerability as false positive")
    
    # Verify the change
    test_get_vulnerability(vulnerability_id)
    print("Verified vulnerability status") 