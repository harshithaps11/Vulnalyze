import React, { useState } from 'react';
import { 
  ChevronDown, 
  ChevronUp, 
  AlertTriangle, 
  Shield, 
  Clipboard, 
  ExternalLink, 
  Search,
  AlertCircle
} from 'lucide-react';
import { Button } from '../ui/Button';
import { Badge } from '../ui/Badge';
import { Avatar } from '../ui/Avatar';
import { mockVulnerabilities, mockUsers } from '../../data/mockData';
import { getSeverityBadgeClass, formatDate } from '../../lib/utils';

export function VulnerabilityTable() {
  const [vulnerabilities] = useState(mockVulnerabilities);
  const [sortField, setSortField] = useState<string>('severity');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedVulnerability, setSelectedVulnerability] = useState<string | null>(null);

  const handleSort = (field: string) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('desc');
    }
  };

  const getSortIcon = (field: string) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? <ChevronUp size={16} /> : <ChevronDown size={16} />;
  };

  const sortedVulnerabilities = [...vulnerabilities]
    .filter(vuln => 
      vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      vuln.location.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (sortField === 'severity') {
        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1, info: 0 };
        const aValue = severityOrder[a.severity as keyof typeof severityOrder];
        const bValue = severityOrder[b.severity as keyof typeof severityOrder];
        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;
      }

      if (sortField === 'status') {
        const statusOrder = { 'open': 3, 'in-progress': 2, 'fixed': 1, 'false-positive': 0 };
        const aValue = statusOrder[a.status as keyof typeof statusOrder];
        const bValue = statusOrder[b.status as keyof typeof statusOrder];
        return sortDirection === 'asc' ? aValue - bValue : bValue - aValue;
      }

      const aValue = (a as any)[sortField];
      const bValue = (b as any)[sortField];
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortDirection === 'asc' 
          ? aValue.localeCompare(bValue) 
          : bValue.localeCompare(aValue);
      }
      
      return 0;
    });

  const toggleVulnerabilityDetails = (id: string) => {
    setSelectedVulnerability(selectedVulnerability === id ? null : id);
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'open':
        return <Badge variant="high">Open</Badge>;
      case 'in-progress':
        return <Badge variant="medium">In Progress</Badge>;
      case 'fixed':
        return <Badge variant="low">Fixed</Badge>;
      case 'false-positive':
        return <Badge variant="default">False Positive</Badge>;
      default:
        return <Badge variant="default">{status}</Badge>;
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row justify-between gap-4">
        <div className="relative w-full sm:w-64">
          <div className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <Search size={16} className="text-dark-400" />
          </div>
          <input
            type="text"
            className="input pl-10"
            placeholder="Search vulnerabilities..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        <div className="flex items-center gap-2">
          <span className="text-sm text-dark-400">
            {sortedVulnerabilities.length} vulnerabilities found
          </span>
        </div>
      </div>
      
      <div className="table-container">
        <table className="table">
          <thead>
            <tr>
              <th 
                className="cursor-pointer"
                onClick={() => handleSort('title')}
              >
                <div className="flex items-center">
                  <span>Vulnerability</span>
                  {getSortIcon('title')}
                </div>
              </th>
              <th 
                className="cursor-pointer"
                onClick={() => handleSort('severity')}
              >
                <div className="flex items-center">
                  <span>Severity</span>
                  {getSortIcon('severity')}
                </div>
              </th>
              <th 
                className="cursor-pointer"
                onClick={() => handleSort('location')}
              >
                <div className="flex items-center">
                  <span>Location</span>
                  {getSortIcon('location')}
                </div>
              </th>
              <th 
                className="cursor-pointer"
                onClick={() => handleSort('status')}
              >
                <div className="flex items-center">
                  <span>Status</span>
                  {getSortIcon('status')}
                </div>
              </th>
              <th>Assigned To</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-dark-700">
            {sortedVulnerabilities.length > 0 ? (
              sortedVulnerabilities.map(vuln => (
                <React.Fragment key={vuln.id}>
                  <tr className="hover:bg-dark-700/50 cursor-pointer" onClick={() => toggleVulnerabilityDetails(vuln.id)}>
                    <td className="flex items-start">
                      {vuln.severity === 'critical' && (
                        <AlertTriangle size={16} className="text-severity-critical mt-0.5 mr-2 flex-shrink-0" />
                      )}
                      <div>
                        <div className="font-medium text-dark-200">{vuln.title}</div>
                        <div className="text-xs text-dark-400 mt-1">
                          {formatDate(vuln.createdAt)}
                        </div>
                      </div>
                    </td>
                    <td>
                      <Badge variant={vuln.severity as any}>
                        {vuln.severity.charAt(0).toUpperCase() + vuln.severity.slice(1)}
                      </Badge>
                    </td>
                    <td>
                      <div className="text-dark-300 text-sm">
                        {vuln.location}
                        {vuln.lineNumber && <span className="text-dark-400">:{vuln.lineNumber}</span>}
                      </div>
                    </td>
                    <td>
                      {getStatusBadge(vuln.status)}
                    </td>
                    <td>
                      {vuln.assignedTo ? (
                        <div className="flex items-center">
                          <Avatar 
                            src={vuln.assignedTo.avatar} 
                            alt={vuln.assignedTo.name} 
                            size="sm" 
                            className="mr-2"
                          />
                          <span className="text-sm text-dark-300">{vuln.assignedTo.name}</span>
                        </div>
                      ) : (
                        <Button 
                          variant="outline" 
                          size="sm"
                          className="text-xs"
                          onClick={(e) => {
                            e.stopPropagation();
                            // Assign functionality would go here
                          }}
                        >
                          Assign
                        </Button>
                      )}
                    </td>
                    <td>
                      <div className="flex items-center space-x-2">
                        <Button 
                          variant="secondary" 
                          size="sm"
                          className="!p-1"
                          onClick={(e) => {
                            e.stopPropagation();
                            // View functionality would go here
                          }}
                        >
                          <ExternalLink size={16} />
                        </Button>
                        <Button 
                          variant="secondary" 
                          size="sm"
                          className="!p-1"
                          onClick={(e) => {
                            e.stopPropagation();
                            // Copy functionality would go here
                          }}
                        >
                          <Clipboard size={16} />
                        </Button>
                      </div>
                    </td>
                  </tr>
                  
                  {selectedVulnerability === vuln.id && (
                    <tr>
                      <td colSpan={6} className="p-0">
                        <div className="p-4 bg-dark-800 border-t border-dark-700">
                          <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                            <div className="lg:col-span-2 space-y-4">
                              <div>
                                <h4 className="text-sm font-medium text-dark-300 mb-1">Description</h4>
                                <p className="text-sm text-dark-200">{vuln.description}</p>
                              </div>
                              
                              {vuln.remediation && (
                                <div>
                                  <h4 className="text-sm font-medium text-dark-300 mb-1">Remediation</h4>
                                  <p className="text-sm text-dark-200">{vuln.remediation}</p>
                                </div>
                              )}
                              
                              {vuln.owasp && (
                                <div className="flex gap-4">
                                  <div>
                                    <h4 className="text-sm font-medium text-dark-300 mb-1">OWASP Reference</h4>
                                    <div className="flex items-center">
                                      <Shield size={14} className="text-primary-500 mr-1" />
                                      <span className="text-sm text-primary-400">{vuln.owasp}</span>
                                    </div>
                                  </div>
                                  
                                  {vuln.cwe && (
                                    <div>
                                      <h4 className="text-sm font-medium text-dark-300 mb-1">CWE</h4>
                                      <span className="text-sm text-dark-200">{vuln.cwe}</span>
                                    </div>
                                  )}
                                  
                                  {vuln.cvss && (
                                    <div>
                                      <h4 className="text-sm font-medium text-dark-300 mb-1">CVSS Score</h4>
                                      <span className={`text-sm font-medium ${getSeverityBadgeClass(vuln.severity)}`}>
                                        {vuln.cvss}
                                      </span>
                                    </div>
                                  )}
                                </div>
                              )}
                              
                              {vuln.lineNumber && (
                                <div>
                                  <h4 className="text-sm font-medium text-dark-300 mb-1">Code Snippet</h4>
                                  <div className="bg-dark-900 rounded p-3 font-mono text-xs text-dark-200 overflow-x-auto">
                                    <pre>
                                      <code>
                                        {`// ${vuln.location}:${vuln.lineNumber}\n`}
                                        {`function processUserInput(input) {\n`}
                                        {`  const query = "SELECT * FROM users WHERE username = '" + input + "'";\n`}
                                        {`  // Vulnerable to SQL injection\n`}
                                        {`  return db.execute(query);\n`}
                                        {`}`}
                                      </code>
                                    </pre>
                                  </div>
                                </div>
                              )}
                            </div>
                            
                            <div className="space-y-4 border-t lg:border-t-0 lg:border-l border-dark-700 pt-4 lg:pt-0 lg:pl-4">
                              <div>
                                <h4 className="text-sm font-medium text-dark-300 mb-2">Actions</h4>
                                <div className="flex flex-col gap-2">
                                  <Button variant="primary" size="sm">
                                    Remediate Now
                                  </Button>
                                  <Button variant="secondary" size="sm">
                                    Mark as False Positive
                                  </Button>
                                  
                                  <div className="mt-2">
                                    <label className="block text-xs font-medium text-dark-300 mb-1">
                                      Assign To
                                    </label>
                                    <select className="input">
                                      <option value="">Select team member</option>
                                      {mockUsers.map(user => (
                                        <option key={user.id} value={user.id}>
                                          {user.name}
                                        </option>
                                      ))}
                                    </select>
                                  </div>
                                </div>
                              </div>
                              
                              <div>
                                <h4 className="text-sm font-medium text-dark-300 mb-2">Comments</h4>
                                <div className="bg-dark-700 rounded p-3 text-xs text-dark-300">
                                  <p className="italic text-dark-400">No comments yet</p>
                                </div>
                                
                                <div className="mt-2">
                                  <textarea 
                                    className="input text-xs h-20 resize-none" 
                                    placeholder="Add a comment..."
                                  ></textarea>
                                  <Button variant="secondary" size="sm" className="mt-2 text-xs">
                                    Post Comment
                                  </Button>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </td>
                    </tr>
                  )}
                </React.Fragment>
              ))
            ) : (
              <tr>
                <td colSpan={6} className="text-center py-8">
                  <div className="flex flex-col items-center">
                    <AlertCircle size={24} className="text-dark-400 mb-2" />
                    <p className="text-dark-300">No vulnerabilities found</p>
                    <p className="text-sm text-dark-400 mt-1">
                      {searchTerm ? 'Try adjusting your search query' : 'Start a scan to find vulnerabilities'}
                    </p>
                  </div>
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}